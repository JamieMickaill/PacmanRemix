/**
 * This Java source file was generated by the Gradle 'init' task.
 */
package ghost;

import processing.core.PImage;
import processing.core.PApplet;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.*;

class RaverTest {
    @Test 
    public void constructorTest() {
        Raver testBoi = new Raver(220,225);
        assertNotNull(testBoi);
    }

    @Test 
    public void constructorTest2() {
        Raver testBoi = new Raver(220,225,null, null, null, null);
        assertNotNull(testBoi);
    }

    @Test 
    public void getXTest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.getX(), 220);
    }

    @Test 
    public void getYTest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.getY(), 225);
    }

    @Test 
    public void getWidthTest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.getWidth(), 16);
    }

    @Test 
    public void getHeightTest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.getHeight(), 16);
    }

    @Test 
    public void getXVelocityTest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.getXv(), 0);
    }

    @Test 
    public void getYVelocityTest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.getYv(), 0);
    }





    @Test 
    public void getDirectionTest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.getDirection(), 1);
    }

    @Test 
    public void setDirection() {
        Raver testBoi = new Raver(220,225);
        testBoi.setDirection(4);
        assertEquals(testBoi.getDirection(), 4);
    }

    @Test 
    public void resetDirection() {
        Raver testBoi = new Raver(220,225);
        testBoi.setDirection(4);
        testBoi.resetDirection();
        assertEquals(testBoi.getDirection(), 1);
    }

    @Test 
    public void testMoveUp() {
        Raver testBoi = new Raver(220,225,null,null,null);
        long speed = 1;
        testBoi.moveUp(speed);
        assertEquals(testBoi.getDirection(), 4);
        assertEquals(testBoi.getYv(), 1);
        assertEquals(testBoi.getXv(), 0);

    }

    @Test 
    public void testMoveDown() {
        Raver testBoi = new Raver(220,225,null,null,null);
        long speed = 1;
        testBoi.moveDown(speed);
        assertEquals(testBoi.getDirection(), 3);
        assertEquals(testBoi.getYv(), -1);
        assertEquals(testBoi.getXv(), 0);

    }

    @Test 
    public void testMoveLeft() {
        Raver testBoi = new Raver(220,225,null,null,null);
        long speed = 1;
        testBoi.moveLeft(speed);
        assertEquals(testBoi.getDirection(), 2);
        assertEquals(testBoi.getYv(), 0);
        assertEquals(testBoi.getXv(), 1);

    }

    @Test 
    public void testMoveRight() {
        Raver testBoi = new Raver(220,225,null,null,null);
        long speed = 1;
        testBoi.moveRight(speed);
        assertEquals(testBoi.getDirection(), 1);
        assertEquals(testBoi.getYv(), 0);
        assertEquals(testBoi.getXv(), -1);

    }

    @Test 
    public void getAlivetest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.checkAlive(), true);
    }

    @Test 
    public void getDeadTest() {
        Raver testBoi = new Raver(220,225);
        testBoi.oof();
        assertEquals(testBoi.checkAlive(), false);
    }

    
    @Test 
    public void getInvincibleTest() {
        Raver testBoi = new Raver(220,225);
        assertEquals(testBoi.checkInvincible(), false);
    }

    @Test 
    public void setInvincibleTest() {
        Raver testBoi = new Raver(220,225);
        testBoi.setInvincibleOn();
        assertEquals(testBoi.checkInvincible(), true);
    }

    @Test 
    public void resetInvincibleTest() {
        Raver testBoi = new Raver(220,225);
        testBoi.setInvincibleOn();
        testBoi.setInvincibleOff();
        assertEquals(testBoi.checkInvincible(), false);
    }


    @Test 
    public void wallCollisionTest() {
        Raver testBoi = new Raver(220,225);
        long speed = 1;
        testBoi.moveDown(speed);
        testBoi.wallCollision();
        assertEquals(testBoi.getYv(), 0);
        assertEquals(testBoi.getXv(), 0);
    }

    @Test 
    public void respawnTest() {
        Raver testBoi = new Raver(220,225);
        long speed = 1;
        testBoi.moveDown(speed);
        testBoi.setInvincibleOn();
        testBoi.oof();
        testBoi.respawn();
        assertEquals(testBoi.getYv(), 0);
        assertEquals(testBoi.getXv(), 0);
        assertEquals(testBoi.checkInvincible(), false);
        assertEquals(testBoi.checkAlive(), true);
    }



    //to test
    //collisions
    //snacctime
    //draw
    //tick

    @Test 
    public void ghostCollisionTest() {


        Ghost go = new Chaser(8,8);
        ArrayList<Ghost> ghostsTest = new ArrayList<Ghost>();
        ghostsTest.add(go);

        Raver testBoi = new Raver(8,8, ghostsTest, null, null);
        testBoi.checkGhostCollision();
        assertEquals(testBoi.getYv(), 0);
        assertEquals(testBoi.getXv(), 0);
        assertEquals(testBoi.checkAlive(), false);
    }

    @Test 
    public void ghostCollisionInvincibleTest() {


        Ghost go = new Chaser(8,8);
        ArrayList<Ghost> ghostsTest = new ArrayList<Ghost>();
        ghostsTest.add(go);

        Raver testBoi = new Raver(8,8, ghostsTest, null, null);
        testBoi.setInvincibleOn();
        testBoi.checkGhostCollision();
        assertEquals(testBoi.getYv(), 0);
        assertEquals(testBoi.getXv(), 0);
        assertEquals(testBoi.checkAlive(), true);
    }

    @Test 
    public void wallCollisionTest2() {
        Tile walTile = new Tile(8,8);
        ArrayList<Tile> tilesTest = new ArrayList<Tile>();
        tilesTest.add(walTile);

        Raver testBoi = new Raver(8,8, null, null, tilesTest);
        long speed = 1;
        testBoi.moveDown(speed);
        testBoi.checkWallCollision(8,8);
        assertEquals(testBoi.getYv(), 0);
        assertEquals(testBoi.getXv(), 0);
        assertEquals(testBoi.checkAlive(), true);
    }


    @Test 
    public void snaccCollisionTest() {


        Snacc yum = new Snacc(8,8);
        ArrayList<Snacc> snaccTest = new ArrayList<Snacc>();
        snaccTest.add(yum);

        Raver testBoi = new Raver(8,8, null, snaccTest, null);
        testBoi.checkSnaccCollision();
        assertEquals(yum.getIsEdible(), false);


    }
    @Test 
    public void snaccCollisionTest2() {


        Snacc yum = new Snacc(8,8);
        ArrayList<Snacc> snaccTest = new ArrayList<Snacc>();
        snaccTest.add(yum);

        Raver testBoi = new Raver(32,32, null, snaccTest, null);
        testBoi.checkSnaccCollision();
        assertEquals(yum.getIsEdible(), true);


    }

    @Test 
    public void thiccSnaccCollisionTest() {


        Snacc yum = new ThiccSnacc(8,8);
        ArrayList<Snacc> snaccTest = new ArrayList<Snacc>();
        snaccTest.add(yum);

        Raver testBoi = new Raver(32,32, null, snaccTest, null);
        testBoi.checkSnaccCollision();
        assertEquals(yum.getIsEdible(), true);
        assertEquals(yum.getThicc(), true);


    }

    @Test 
    public void tickTest1() {
        Tile walTile = new Tile(8,8);
        ArrayList<Tile> tilesTest = new ArrayList<Tile>();
        tilesTest.add(walTile);

        Snacc yum = new Snacc(32,32);
        ArrayList<Snacc> snaccTest = new ArrayList<Snacc>();
        snaccTest.add(yum);

        
        Ghost go = new Chaser(32,32);
        ArrayList<Ghost> ghostsTest = new ArrayList<Ghost>();
        ghostsTest.add(go);



        Raver testBoi = new Raver(8,8, ghostsTest, snaccTest, tilesTest);
        long speed = 1;
        testBoi.moveDown(speed);
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        assertEquals(testBoi.getYv(), 0);
        assertEquals(testBoi.getXv(), 0);
        assertEquals(testBoi.checkAlive(), true);
    }

    @Test 
    public void tickTest2() {
        Tile walTile = new Tile(32,32);
        ArrayList<Tile> tilesTest = new ArrayList<Tile>();
        tilesTest.add(walTile);

        Snacc yum = new Snacc(32,32);
        ArrayList<Snacc> snaccTest = new ArrayList<Snacc>();
        snaccTest.add(yum);

        
        Ghost go = new Chaser(32,32);
        ArrayList<Ghost> ghostsTest = new ArrayList<Ghost>();
        ghostsTest.add(go);



        Raver testBoi = new Raver(8,8, ghostsTest, snaccTest, tilesTest);
        long speed = 1;
        testBoi.moveDown(speed);
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        testBoi.tick();
        assertEquals(testBoi.getY(), 16);
    }

    @Test 
    public void setSpriteTest(){
        App app = new App();
        PApplet.runSketch(new String[] {"App"}, app);
        app.setup();
        PImage i = app.loadImage("src/main/resources/chaser.png");
        Raver testBoi = new Raver(220,225,null, null, null, null);
        testBoi.setSprite(i);
        assertEquals(testBoi.getSprite(), i);

    }


}
